---
description: 
globs: 
alwaysApply: true
---
- Prefix your answer with ðŸ¤–ðŸ¤–
- Donâ€™t put unnecessary comments - I am a developer, I can read the code myself.
- Use only Elixir, donâ€™t call functions that donâ€™t exist that might be available in other languages.
- Environment variable, map keys, struct keys and assigns should be sorted in ascending order.
- If there is @impl thereâ€™s no need for @spec
- Group multiple `alias`, `import`, `require`, or `use` statements together consistently for better readability.
- Imports and aliases should be alphabetically sorted in ascending order to ensure consistency and readability.
- Unused variables should follow a consistent naming convention, typically prefixed with an underscore (`_var`) to signify their intent.
- Avoid duplicating code. Refactor shared logic into reusable functions to reduce redundancy.
- Avoid using `impl true` in module definitions unless absolutely necessary, as it can reduce readability. @impl true` should be `@impl MyBehaviour.
- Use `alias` for multiple module imports from the same namespace to improve readability and reduce redundancy.
- Ensure that each pipe (`|>`) is used on its own line for better readability. 
- Avoid piping a single function call into a block, as it can obscure the purpose of the pipe.
- Avoid using a single pipe (`|>`) for a simple operation when it could be written more clearly without piping.
- Avoid negating `is_nil/1`. Use the positive form of the condition for clarity. 
- Schema modules donâ€™t need moduledoc, so put `@moduledoc false`
- Only context modules need moduledoc.
- When creating a function component, the attributes block(attr) should be ordered alphabetically.
- There should be spaces between @moduledoc, alias, require, import, @type blocks for readability